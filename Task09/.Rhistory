library(DESeq2)
count.mat <- read.table("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t", header = T)
pheno.dat <- read.csv("mayo.path_aging.con.phenotype.csv")
pheno.dat
?DESeqDataSet
DESeqDataSetFromMatrix(count.mat, pheno.dat, design = ~ Diagnosis)
dim(count.mat)
dim(pheno.dat)
head(count.mat)
count.mat <- read.table("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t", header = T,
row.names = T)
count.mat <- read.table("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t", header = T,
rownames = T)
count.mat <- read.table("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t", header = T,
rownames = 1)
count.mat <- read.table("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t", header = T,
row.names = 1)
head(count.mat)
count.mat$X
length(count.mat$X)
length(unique(count.mat$X))
table(count.mat$X) > 1
table(count.mat$X)[table(count.mat$X) > 1]
## which genes are duplicated?
table(count.mat$X)[table(count.mat$X) > 1]
## there are 2 genes that are duplicates so "row.names = 1" fails
count.mat <- read.table("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t",
header = T, row.names = 1)
## which genes are duplicated?
dups <- table(count.mat$X)[table(count.mat$X) > 1]
## 1-Mar and 2-Mar are in there twice so rename second of each *-Mar.2
count.mat[count.mat$X %in% dups,]
## which genes are duplicated?
dups <- table(count.mat$X)[table(count.mat$X) > 1]
count.mat$X
dups
## 1-Mar and 2-Mar are in there twice so rename second of each *-Mar.2
count.mat[count.mat$X %in% names(dups),]
## 1-Mar and 2-Mar are in there twice so rename second of each *-Mar.2
## https://stackoverflow.com/questions/31707654/r-set-duplicate-row-names-to-a-numeric-data-frame
make.names(count.mat$X, unique = T)
## 1-Mar and 2-Mar are in there twice so rename second of each *-Mar.2
## https://stackoverflow.com/questions/31707654/r-set-duplicate-row-names-to-a-numeric-data-frame
rownames(count.mat) <- make.names(count.mat$X, unique = T)
count.mat[, -1]
dim(count.mat[, -1])
count.mat <- count.mat[, -1]
## there are two gene
dseq.dat <- DESeqDataSetFromMatrix(count.mat, pheno.dat, design = ~ Diagnosis)
count.mat
sapply(count.mat, class)
sapply(count.mat, class) == "numeric"
## there are two gene
dseq.dat <- DESeqDataSetFromMatrix(count.mat, pheno.dat, design = ~ Diagnosis)
colnames(count.mat)
pheno.dat$UID
## sanity
all(colnames(count.mat) == pheno.dat$UID)
## there are 2 genes that are duplicates so "row.names = 1" fails
count.mat <- read.table("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t",
header = T)
head(count.mat)
## there are 2 genes that are duplicates so "row.names = 1" fails
count.mat <- read.csv("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t",
header = T)
head(count.mat)
## col.names comes in with X* because first column header is blank
colnames(count.mat) <- gsub("X", "", colnames(count.mat))
all(colnames(count.mat) == pheno.dat$UID)
colnames(count.mat)
## there are 2 genes that are duplicates so "row.names = 1" fails
count.mat <- read.csv("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t",
header = T)
## 1-Mar and 2-Mar are in there twice so rename second of each *-Mar.2
## https://stackoverflow.com/questions/31707654/r-set-duplicate-row-names-to-a-numeric-data-frame
rownames(count.mat) <- make.names(count.mat$X, unique = T)
count.mat <- count.mat[, -1]
## sanity
all(colnames(count.mat) == pheno.dat$UID)
gsub("X", "", colnames(count.mat))
## col.names comes in with X* because first column header is blank
colnames(count.mat) <- gsub("X", "", colnames(count.mat))
all(colnames(count.mat) == pheno.dat$UID)
colnames(count.mat) == pheno.dat$UID
pheno.dat$UID
colnames(count.mat)
## there are 2 genes that are duplicates so "row.names = 1" fails
count.mat <- read.csv("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t",
header = T)
## there are 2 genes that are duplicates so "row.names = 1" fails
count.mat <- read.csv("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t",
header = T)
rownames(count.mat) <- make.names(count.mat$X, unique = T)
count.mat <- count.mat[, -1]
## sanity
all(colnames(count.mat) == pheno.dat$UID)
## col.names comes in with X* because first column header is blank
colnames(count.mat) <- sub("X", "", colnames(count.mat))
all(colnames(count.mat) == pheno.dat$UID)
sapply(count.mat, class) == "numeric"
## there are two gene
dseq.dat <- DESeqDataSetFromMatrix(count.mat, pheno.dat, design = ~ Diagnosis)
as.matrix(count.mat)
dseq.dat <- DESeqDataSetFromMatrix(as.matrix(count.mat), pheno.dat, design = ~ Diagnosis)
round(count.mat)
dseq.dat <- DESeqDataSetFromMatrix(round(count.mat), pheno.dat, design = ~ Diagnosis)
dseq.dat
View(pheno.dat)
library(tximport)
grepl(".*-Mar", rownames(count.mat))
sum(grepl(".*-Mar", rownames(count.mat)))
sum(grepl("-Mar", rownames(count.mat)))
rownames(count.mat)
View(count.mat)
## which genes are duplicated?
dups <- table(count.mat$X)[table(count.mat$X) > 1]
dups
make.names(count.mat$X, unique = T)
sum(grepl(".*Mar", rownames(count.mat)))
rownames(count.mat)[grepl(".*Mar", rownames(count.mat))]
## there are 2 genes that are duplicates so "row.names = 1" fails
count.mat <- read.csv("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t",
header = T)
## which genes are duplicated?
dups <- table(count.mat$X)[table(count.mat$X) > 1]
dups
count.mat$X[table(count.mat$X) > 1]
table(count.mat$X) > 1
count.mat$X[count.mat$X %in% dups]
count.mat$X[count.mat$X %in% names(dups)]
make.names(count.mat$X[count.mat$X %in% names(dups)])
make.unique(count.mat$X[count.mat$X %in% names(dups)])
make.unique
make.unique(count.mat$X, unique = T)
make.unique(count.mat$X)
## 1-Mar and 2-Mar are in there twice so rename second of each *-Mar.1
## https://stackoverflow.com/questions/31707654/r-set-duplicate-row-names-to-a-numeric-data-frame
rownames(count.mat) <- make.unique(count.mat$X)
rownames(count.mat)[grepl(".*Mar", rownames(count.mat))]
count.mat <- count.mat[, -1]
## sanity
all(colnames(count.mat) == pheno.dat$UID)
## col.names comes in with X* because first column header is blank
colnames(count.mat) <- sub("X", "", colnames(count.mat))
all(colnames(count.mat) == pheno.dat$UID)
library(tximport)
system.file("extdata", package = "tximportData")
system.file("extdata", package = "tximportData")
dir <- system.file("extdata", package = "tximportData")
list.files
list.files()
list.files(dir)
samples <- read.table(file.path(dir, "samples.txt"), header = TRUE)
files <- file.path(dir, "salmon", samples$run, "quant.sf.gz")
files
file.path()
?file.path()
samples$run
file.path(dir, "salmon", samples$run)
tximport::tximport("mayo.path_aging.con.salmon.gene.counts.txt")
tximport::makeCountsFromAbundance(counts.mat)
tximport::makeCountsFromAbundance(count.mat)
txi
tx2gene <- read_csv(file.path(dir, "tx2gene.gencode.v27.csv"))
head(tx2gene)
dir
library(readr)
tx2gene <- read_csv(file.path(dir, "tx2gene.gencode.v27.csv"))
head(tx2gene)
txi <- tximport(files, type = "salmon", tx2gene = tx2gene)
txi
head(txi$counts)
sampleTable <- data.frame(condition = factor(rep(c("A", "B"), each = 3)))
rownames(sampleTable) <- colnames(txi$counts)
test <- DESeqDataSetFromTximport(txi, sampleTable, ~condition)
test
counts(test)
head(counts(test))
head(txi$counts)
head(counts(test, normalized = T))
