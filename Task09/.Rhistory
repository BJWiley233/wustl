distfun=dist)
new.lmat=rbind(c(4,3), c(2,1), c(0,0))
heatmap.2(exprs.filt, key=F, colCol = colors, trace="none",
col = bluered(40),
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
distfun=dist)
new.lmat=rbind(c(4,3), c(2,1), c(0,0))
new.lhei=c(0.5,4.0,1)
new.lwid=c(0.5,3)
heatmap.2(scale_(exprs.filt), key=F, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat,
lhei = new.lhei,
lwid = new.lwid,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
image(as.matrix(leg),col=cx,axes=F)
tmp <- round(leg,2)
axis(1,at=seq(0,1,length=length(leg)),labels=tmp,cex.axis=1)
heatmap.2(scale_(exprs.filt), key=F, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat,
lhei = new.lhei,
lwid = new.lwid,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
new.lmat=rbind(c(4,3), c(2,1), c(0,0))
new.lhei=c(0.3,2.0,0.8)
new.lwid=c(0.5,3)
heatmap.2(scale_(exprs.filt), key=F, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat,
lhei = new.lhei,
lwid = new.lwid,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
new.lmat
new.lmat=rbind(c(4,3), c(2,1), c(0,0))
new.lmat
heatmap.2(exprs.filt, key=F, colCol = colors, trace="none",
col = bluered(40),
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
distfun=dist)
heatmap.2(scale_(exprs.filt), key=F, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/JHU_Fall_2020/Data_Analysis/Datasets")
knitr::opts_chunk$set(
fig.path = "README_figs/README-"
)
rbind(c(5,0,4), c(3,1,2))
rbind(c(4,3), c(2,1), c(0,0))
new.lmat=rbind(c(5,4), c(0,1), c(3,2))
new.lhei=c(0.3,2.0,0.8)
new.lwid=c(0.5,3)
heatmap.2(scale_(exprs.filt), key=F, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
new.lhei=c(0.3,0.2,4)
new.lwid=c(0.3,3)
heatmap.2(scale_(exprs.filt), key=F, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
new.lmat
new.lmat=rbind(c(0,4), c(0,1), c(3,2), c(0,5))
new.lhei=c(0.3,0.2,4)
new.lwid=c(0.3,3)
heatmap.2(scale_(exprs.filt), key=T, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
new.lhei=c(0.3,0.2,4,0.5)
heatmap.2(scale_(exprs.filt), key=T, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
new.lhei=c(0.3,0.2,4,0.3)
heatmap.2(scale_(exprs.filt), key=T, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
new.lhei=c(0.3,0.2,3,0.3)
heatmap.2(scale_(exprs.filt), key=T, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
heatmap.2(scale_(exprs.filt), key=T, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
new.lhei=c(0.3,0.2,3,1)
heatmap.2(scale_(exprs.filt), key=T, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
heatmap.2(scale_(exprs.filt), key=T, colCol = colors, trace="none",
col = bluered(40), labCol = FALSE,
lmat = new.lmat, lwid = new.lwid, lhei = new.lhei,
Colv = dend1, ColSideColors = labels_colors(dend1)[order(order.dendrogram(dend1))])
library(Seurat)
cbmc.rna <- as.sparse(read.csv("~/Downloads/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv", sep = ",",
header = TRUE, row.names = 1))
cbmc.rna <- Seurat::CollapseSpeciesExpressionMatrix(cbmc.rna)
cbmc.adt <- as.sparse(read.csv("~/Downloads/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv", sep = ",",
header = TRUE, row.names = 1))
cbmc.adt <- as.sparse(read.csv("~/Downloads/GSE100866_CBMC_8K_13AB_10X-adt_umi.csv", sep = ",",
header = TRUE, row.names = 1))
cbmc.adt <- as.sparse(read.csv("~/Downloads/GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv", sep = ",",
header = TRUE, row.names = 1))
cbmc.adt <- cbmc.adt[!c("CCR5", "CCR7", "CD10")), ]
cbmc.adt <- cbmc.adt[!c("CCR5", "CCR7", "CD10"), ]
cbmc.adt <- subset(!rownames(cmbc.adt) %in% c("CCR5", "CCR7", "CD10"), ]
cbmc.adt <- subset(!rownames(cmbc.adt) %in% c("CCR5", "CCR7", "CD10"))
cbmc.adt <- subset(!rownames(cbmc.adt) %in% c("CCR5", "CCR7", "CD10"))
cbmc.adt <- subset(cbmc.adt, !rownames(cbmc.adt) %in% c("CCR5", "CCR7", "CD10"))
cbmc.adt <- as.sparse(read.csv("~/Downloads/GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv", sep = ",",
header = TRUE, row.names = 1))
cbmc.adt[setdiff(setrownames(cbmc.adt), c("CCR5", "CCR7", "CD10")),]
cbmc.adt[setdiff(rownames(cbmc.adt), c("CCR5", "CCR7", "CD10")),]
cbmc.adt <- cbmc.adt[setdiff(rownames(cbmc.adt), c("CCR5", "CCR7", "CD10")),]
cbmc.rna
dim(cbmc.rna)
cbmc.rna@x
class(cbmc.rna)
class(cbmc.rna@Dim)
cbmc.rna@Dim
cbmc.rna
cbmc <- CreateSeuratObject(counts = cbmc.rna)
cbmc
counts(cmbc)
cbmc@assays
cbmc@assays$RNA
cbmc@assays$RNA@counts
cbmc.rna
dimnames(cbmc@assays$RNA@counts)
dim(cbmc@assays$RNA@counts)
cbmc.norm <- NormalizeData(cbmc)
cmbc.pca <- RunPCA(cbmc.norm)
cbmc.norm <- NormalizeData(cbmc)
cmbc.norm <- FindVariableFeatures(cbmc.norm)
cmbc.norm <- ScaleData(cbmc.norm)
cmbc.pca <- RunPCA(cbmc.norm)
cbmc.norm <- NormalizeData(cbmc)
cmbc.norm <- FindVariableFeatures(cbmc.norm)
cmbc.norm <- ScaleData(cbmc.norm)
cmbc.pca <- RunPCA(cbmc.norm)
FindVariableFeatures(cbmc.norm)
cmbc.norm
cbmc.norm <- NormalizeData(cbmc)
cmbc.norm <- FindVariableFeatures(cbmc.norm)
cmbc.norm
ScaleData(cbmc.norm)
cbmc<- NormalizeData(cbmc)
cbmc<- FindVariableFeatures(cbmc)
cbmc <- ScaleData(cbmc)
cbmc <- RunPCA(cbmc)
ElbowPlot(cbmc, ndims = 50)
cbmc.norm <- NormalizeData(cbmc)
cbmc.fv <- FindVariableFeatures(cbmc.norm)
cbmc.sc <- ScaleData(cbmc.fv)
cbmc.pca <- RunPCA(cbmc.sc)
ElbowPlot(cbmc.pca, ndims = 50)
ElbowPlot(cbmc, ndims = 50)
cbmc
FindNeighbors
cbmc <- FindNeighbors(cbmc, dims = 1:25)
Graphs(cbmc)
Neighbors(cbmc)
cbmc <- FindClusters(cbmc)
cbmc <- FindClusters(cbmc, resolution = 0.8)
cbmc <- RunTSNE(cbmc, dims = 1:25, method = "FIt-tSNE")
cbmc.rna.markers <- FindAllMarkers(cbmc, max.cells.per.ident = 100, min.diff.pct = 0.3,
only.pos = T)
new.cluster.ids <- c("Memory CD4 T", "CD14+ Mono", "Naive CD4 T", "NK", "CD14+ Mono", "Mouse", "B",
"CD8 T", "CD16+ Mono", "T/Mono doublets", "NK", "CD34+", "Multiplets", "Mouse", "Eryth", "Mk",
"Mouse", "DC", "pDCs")
levels(cbmc)
names(new.cluster.ids)
names(new.cluster.ids)
names(new.cluster.ids) <- levels(cbmc)
new.cluster.ids
cbmc@meta.data$seurat_clusters
cbmc@meta.data$orig.ident
new.cluster.ids
cbmc <- RenameIdents(cbmc, new.cluster.ids)
cbmc@meta.data$orig.ident
cbmc@active.ident
DimPlot(cbmc, label = TRUE) + NoLegend()
library(DESeq2)
count.mat <- read.table("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t", header = T)
library(shiny); runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/apptest.R')
runApp('Files_for_Oscar/Task09/app2.R')
runApp('Files_for_Oscar/Task09/app2.R')
runApp('Files_for_Oscar/Task09/app2.R')
runApp('app2.R')
runApp('Files_for_Oscar/Task09/app2.R')
reactiveVal(1)
gene1="Ao"
reactiveVal(gene1)
##
# output$gene2 <- renderUI({
#   selectizeInput("gene2", "Select a gene for charts:",
#                  choices = genes$V1, selected = rv(),
#                  width = "200px")
# })
#
# output$test <- renderText({ !nchar(input$gene) })
vals <- reactiveValues(sync = 1)
vals
runApp('Files_for_Oscar/Task09/app2.R')
runApp('Files_for_Oscar/Task09/app2.R')
runApp('Files_for_Oscar/Task09/app2.R')
cleaned_counts <- read.table("counts_cleaned.txt", sep = "\t")
genes <- as.data.table(row.names(cleaned_counts))
pheno.dat <- read.csv("mayo.path_aging.con.phenotype.csv")
all(sub("^X", "", colnames(cleaned_counts)) == pheno.dat$UID)
res.gender.order.by.fc <- read.table("controlled_gender_res.txt", sep = "\t")
res.age.order.by.fc <- read.table("controlled_age_res.txt", sep = "\t")
res.gender.age.order.by.fc <- read.table("controlled_gender_age_res.txt", sep = "\t")
dseq.gender <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat,
design = ~ Sex + Diagnosis)
pheno.dat2 <- pheno.dat
pheno.dat2$AgeAtDeath <- as.numeric(gsub("_.*", "", pheno.dat2$AgeAtDeath))
dseq.age <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat2,
design = ~ AgeAtDeath + Diagnosis)
dseq.gender.age <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat2,
design = ~ Sex + AgeAtDeath + Diagnosis)
cleaned_counts <- read.table("counts_cleaned.txt", sep = "\t")
genes <- as.data.table(row.names(cleaned_counts))
pheno.dat <- read.csv("mayo.path_aging.con.phenotype.csv")
all(sub("^X", "", colnames(cleaned_counts)) == pheno.dat$UID)
res.gender.order.by.fc <- read.table("controlled_gender_res.txt", sep = "\t")
res.age.order.by.fc <- read.table("controlled_age_res.txt", sep = "\t")
res.gender.age.order.by.fc <- read.table("controlled_gender_age_res.txt", sep = "\t")
dseq.gender <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat,
design = ~ Sex + Diagnosis)
pheno.dat2 <- pheno.dat
pheno.dat2$AgeAtDeath <- as.numeric(gsub("_.*", "", pheno.dat2$AgeAtDeath))
dseq.age <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat2,
design = ~ AgeAtDeath + Diagnosis)
dseq.gender.age <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat2,
design = ~ Sex + AgeAtDeath + Diagnosis)
cleaned_counts <- read.table("counts_cleaned.txt", sep = "\t")
genes <- as.data.table(row.names(cleaned_counts))
pheno.dat <- read.csv("mayo.path_aging.con.phenotype.csv")
all(sub("^X", "", colnames(cleaned_counts)) == pheno.dat$UID)
res.gender.order.by.fc <- read.table("controlled_gender_res.txt", sep = "\t")
res.age.order.by.fc <- read.table("controlled_age_res.txt", sep = "\t")
res.gender.age.order.by.fc <- read.table("controlled_gender_age_res.txt", sep = "\t")
dseq.gender <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat,
design = ~ Sex + Diagnosis)
pheno.dat2 <- pheno.dat
pheno.dat <- read.csv("mayo.path_aging.con.phenotype.csv")
setwd("/home/coyote/Files_for_Oscar/Task09")
cleaned_counts <- read.table("counts_cleaned.txt", sep = "\t")
genes <- as.data.table(row.names(cleaned_counts))
pheno.dat <- read.csv("mayo.path_aging.con.phenotype.csv")
all(sub("^X", "", colnames(cleaned_counts)) == pheno.dat$UID)
res.gender.order.by.fc <- read.table("controlled_gender_res.txt", sep = "\t")
res.age.order.by.fc <- read.table("controlled_age_res.txt", sep = "\t")
res.gender.age.order.by.fc <- read.table("controlled_gender_age_res.txt", sep = "\t")
dseq.gender <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat,
design = ~ Sex + Diagnosis)
pheno.dat2 <- pheno.dat
pheno.dat2$AgeAtDeath <- as.numeric(gsub("_.*", "", pheno.dat2$AgeAtDeath))
dseq.age <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat2,
design = ~ AgeAtDeath + Diagnosis)
dseq.gender.age <- DESeqDataSetFromMatrix(round(cleaned_counts),
pheno.dat2,
design = ~ Sex + AgeAtDeath + Diagnosis)
res.gender.order.by.fc
res.gender.order.by.fc["WAC-AS1"]
res.gender.order.by.fc["WAC-AS1",]
p.gender <- plotCounts(dseq.gender, "WAC-AS1", intgroup = c("Diagnosis", "Sex"),
returnData = T, normalized = F, transform = F, pc = 1)
levels(p.gender$Sex) <- c("Female", "Male")
ggplot(p.gender, aes(x=Diagnosis, y=log2(count), group = 1)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
stat_summary(fun = "mean", geom = "line", color = "red") +
facet_wrap(~ Sex) +
ylab("log2(counts + 1)") +
ggtitle("WAC-AS1") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(p.gender, aes(x=Diagnosis, y=log2(count), group = 1)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
stat_summary(fun = "mean", geom = "line", color = "red") +
#facet_wrap(~ Sex) +
ylab("log2(counts + 1)") +
ggtitle("WAC-AS1") +
theme(plot.title = element_text(hjust = 0.5))
2^-0.43
df <- round(data.frame(res.gender.order.by.fc),2)
df
df <- round(data.frame(res.gender.order.by.fc),4)
df
data.frame(res.gender.order.by.fc)
round(data.frame(res.gender.order.by.fc)[,c(1:4)],4)
round(data.frame(res.gender.order.by.fc)[,c(1:4)],2)
df <- data.frame(res.gender.order.by.fc)
df[1:4,] <- round(data.frame(res.gender.order.by.fc)[,c(1:4)],2)
df[,1:4] <- round(data.frame(res.gender.order.by.fc)[,c(1:4)],2)
df
df <- data.frame(res.gender.order.by.fc)
df <- data.frame(res.gender.order.by.fc)
df[,1:4] <- round(data.frame(res.gender.order.by.fc)[,1:4], 2)
df
mean(res.gender.order.by.fc["WAC-AS1",])
res.gender.order.by.fc["WAC-AS1",]
mean(counts(dseq.gender["WAC-AS1",]))
mean(log2(counts(dseq.gender["WAC-AS1",]+1)))
mean(log2(counts(dseq.gender["WAC-AS1",])+1))
mean(log2(counts(dseq.gender["WAC-AS1",dseq.gender$Sex=="Control"])+1))
dseq.gender["WAC-AS1",dseq.gender$Sex=="Control"]
counts(dseq.gender["WAC-AS1",dseq.gender$Sex=="Control"])
dseq.gender["WAC-AS1",dseq.gender$Sex=="Control"]
dseq.gender["WAC-AS1",]
mean(log2(counts(dseq.gender["WAC-AS1",dseq.gender$Diagnosis=="Control"])+1))
res.gender["WAC-AS1",]
dseq.gender <- DESeqDataSetFromMatrix(round(count.mat),
pheno.dat,
design = ~ Sex + Diagnosis)
dds.gender <- DESeq(dseq.gender)
res.gender <- results(dds.gender, name = "Diagnosis_Pathologic.Aging_vs_Control")
res.gender["WAC-AS1",]
mean(log2(counts(dseq.gender["WAC-AS1",dseq.gender$Diagnosis=="Control"])+1))
mean(log2(counts(dseq.gender["WAC-AS1",dseq.gender$Diagnosis!="Control"])+1))
dseq.dat <- DESeqDataSetFromMatrix(round(count.mat), pheno.dat, design = ~ Diagnosis)
count.mat <- read.csv("mayo.path_aging.con.salmon.gene.counts.txt", sep = "\t",
header = T)
## some gene names were converted to dates - probably got or store in excel
## map back using file from https://www.biostars.org/p/183018/
mangled.genes <- read.table("ExcelMangledGenes.txt", skip = 3, header = F)
count.mat$X <- mapvalues(count.mat$X, from = mangled.genes$V2, to = mangled.genes$V1)
## which genes are duplicated?
dups <- table(count.mat$X)[table(count.mat$X) > 1]
## MARCH1 and MARCH2 are in there twice so rename second of each MARCH*.1
## https://stat.ethz.ch/R-manual/R-patched/library/base/html/make.unique.html
rownames(count.mat) <- make.unique(count.mat$X)
count.mat <- count.mat[, -1]
pheno.dat <- read.csv("mayo.path_aging.con.phenotype.csv")
## sanity colnames = phenodata
all(colnames(count.mat) == pheno.dat$UID)
## col.names comes in with X* because first column header is blank
colnames(count.mat) <- sub("X", "", colnames(count.mat))
all(colnames(count.mat) == pheno.dat$UID)
## DESeq2 only takes integer counts this was just to confirm
## https://support.bioconductor.org/p/133326/
## design for controlling for gender and age while testing Diagnosis condition
## comparisons will be based on the alphabetical order of the levels (Control is reference)
dseq.dat <- DESeqDataSetFromMatrix(round(count.mat), pheno.dat, design = ~ Diagnosis)
dds.dat <- DESeq(dseq.dat)
res.dat <- results(dseq.dat, name = "Diagnosis_Pathologic.Aging_vs_Control")
res.dat.order.by.fc <- res.dat[order(abs(res.dat$log2FoldChange), decreasing = T), ]
res.dat <- results(dds.dat, name = "Diagnosis_Pathologic.Aging_vs_Control")
res.dat["WAC-AS1",]
mean((counts(dseq.gender["WAC-AS1",])))
mean(counts(dseq.gender["WAC-AS1",dseq.gender$Diagnosis=="Control"]))
mean(counts(dseq.gender["WAC-AS1",dseq.gender$Diagnosis!="Control"]))
counts(dseq.gender["WAC-AS1",]
)
res.dat["WAC-AS1",]
mean(log2(counts(dseq.gender["WAC-AS1",dseq.gender$Diagnosis!="Control"])+1))
mean(log2(counts(dseq.gender["WAC-AS1",dseq.gender$Diagnosis!="Control"])+1)) -
mean(log2(counts(dseq.gender["WAC-AS1",dseq.gender$Diagnosis=="Control"])+1))
View(res.gender)
res.gender
results(dds.gender)["WAC-AS1",]
res.gender["WAC-AS1",]
res.gender
res.gender@listData
rownames(res.gender)
rownames(res.gender)[1500:1600]
rownames(res.gender)[21500:21600]
res.gender["LRRC28",]
res.gender["LRP4-AS1",]
res.gender["LRRC16A",]
p.gender <- plotCounts(dseq.gender, "LRRC16A", intgroup = c("Diagnosis", "Sex"),
returnData = T, normalized = F, transform = F, pc = 1)
levels(p.gender$Sex) <- c("Female", "Male")
ggplot(p.gender, aes(x=Diagnosis, y=log2(count), group = 1)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
stat_summary(fun = "mean", geom = "line", color = "red") +
#facet_wrap(~ Sex) +
ylab("log2(counts + 1)") +
ggtitle("WAC-AS1") +
theme(plot.title = element_text(hjust = 0.5))
mean(log2(counts(dseq.gender["LRRC16A",dseq.gender$Diagnosis!="Control"])+1)) -
mean(log2(counts(dseq.gender["LRRC16A",dseq.gender$Diagnosis=="Control"])+1))
res.gender <- results(dds.gender, name = "Diagnosis_Pathologic.Aging_vs_Control", betaPrior=FALSE)
dds.gender <- DESeq(dseq.gender, betaPrior=FALSE)
res.gender <- results(dds.gender, name = "Diagnosis_Pathologic.Aging_vs_Control")
results(dds.gender)["WAC-AS1",]
res.dat["WAC-AS1",]
dds.dat <- DESeq(dseq.dat, betaPrior=FALSE)
res.dat <- results(dds.dat, name = "Diagnosis_Pathologic.Aging_vs_Control")
res.dat["WAC-AS1",]
## DESeq2 only takes integer counts this was just to confirm
## https://support.bioconductor.org/p/133326/
## design for controlling for gender and age while testing Diagnosis condition
## comparisons will be based on the alphabetical order of the levels (Control is reference)
dseq.dat <- DESeqDataSetFromMatrix(round(count.mat["WAC-AS1",]), pheno.dat, design = ~ Diagnosis)
dds.dat <- DESeq(dseq.dat, betaPrior=FALSE)
res.dat <- results(dds.dat, name = "Diagnosis_Pathologic.Aging_vs_Control")
res.dat["WAC-AS1",]
DESeq
pheno.dat
count.mat["WAC-AS1",]
plot(count.mat["WAC-AS1",])
plot(count.mat["WAC-AS1",])
plot(count.mat["WAC-AS1",])
plot(count.mat["WAC-AS1",])
count.mat["WAC-AS1",]
plot(y=count.mat["WAC-AS1",])
plot(x=1:61, y=count.mat["WAC-AS1",])
pheno.dat
mean(count.mat["WAC-AS1",1:41])/mean(count.mat["WAC-AS1",42:61])
count.mat["WAC-AS1",]
mean(count.mat["WAC-AS1",1:41])/mean(count.mat["WAC-AS1",42:61])
mean(count.mat["WAC-AS1",1:41])
count.mat["WAC-AS1",1:41]
mean(as.vector(count.mat["WAC-AS1",1:41]))
mean(as.numeric(count.mat["WAC-AS1",1:41]))
mean(as.numeric(count.mat["WAC-AS1",1:41]))/mean(as.numeric(count.mat["WAC-AS1",42:61]))
-1/0.9370201
DESeq
dds.dat
View(dds.dat)
View(dds.dat)
dds.dat@rowRanges@elementMetadata@listData[["baseMean"]]
## DESeq2 only takes integer counts this was just to confirm
## https://support.bioconductor.org/p/133326/
## design for controlling for gender and age while testing Diagnosis condition
## comparisons will be based on the alphabetical order of the levels (Control is reference)
dseq.dat <- DESeqDataSetFromMatrix(round(count.mat["WAC-AS1",]), pheno.dat, design = ~ Diagnosis)
dseq.dat
dds.dat <- DESeq(dseq.dat, betaPrior=FALSE)
estimateDispersionsGeneEst(dseq.dat)
dds.dat <- estimateDispersionsGeneEst(dseq.dat, normalized=F)
dds.dat <- estimateDispersions(dseq.dat)
dds <- estimateSizeFactors(dseq.dat)
dds <- DESeq(dds, betaPrior=FALSE)
dds <- estimateDispersionsGeneEst(dds, betaPrior=FALSE)
dds <- estimateDispersionsGeneEst(dds)
dds
res.dat <- results(dds, name = "Diagnosis_Pathologic.Aging_vs_Control")
dds <- DESeq(dds)
dds
dds <- DESeq(dds)
dds <- estimateDispersionsGeneEst(dds)
dds <- nbinomWaldTest(dds)
dds
rownames(count.mat)
## DESeq2 only takes integer counts this was just to confirm
## https://support.bioconductor.org/p/133326/
## design for controlling for gender and age while testing Diagnosis condition
## comparisons will be based on the alphabetical order of the levels (Control is reference)
dseq.dat <- DESeqDataSetFromMatrix(round(count.mat[c("WAC-AS1", "ABCB11"),]), pheno.dat, design = ~ Diagnosis)
dds.dat <- DESeq(dseq.dat, betaPrior=FALSE)
res.dat <- results(dds.dat, name = "Diagnosis_Pathologic.Aging_vs_Control")
res.dat["WAC-AS1",]
runApp('app2.R')
dseq.gender <- DESeqDataSetFromMatrix(round(count.mat),
pheno.dat,
design = ~ Sex + Diagnosis)
dds.gender <- DESeq(dseq.gender, betaPrior=FALSE)
res.gender <- results(dds.gender, name = "Diagnosis_Pathologic.Aging_vs_Control")
res.gender.order.by.fc <- res.gender[order(abs(res.gender$log2FoldChange), decreasing = T), ]
res.gender.order.by.fc
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
p.gender <- plotCounts(dseq.gender, input$gene1, intgroup = c("Diagnosis", "Sex"),
returnData = T, normalized = F, transform = F, pc = 1)
p.gender <- plotCounts(dseq.gender, "POP1", intgroup = c("Diagnosis", "Sex"),
returnData = T, normalized = F, transform = F, pc = 1)
levels(p.gender$Sex) <- c("Female", "Male")
ggplot(p.gender, aes(x=Diagnosis, y=log2(count), group = 1)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
stat_summary(fun = "mean", geom = "line", color = "red") +
facet_wrap(~ Sex) +
ylab("log2(counts + 1)", ) +
ggtitle("POP1") +
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size=11),
strip.text.x = element_text(size = 12),
#axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
runApp('app2.R')
mangled.genes
runApp()
